return(fib)
print(fib)
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec){
while length(num_vec) == 1{
return(fib)
print(fib)
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec)
while length(num_vec) == 1{
print(fib)
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec)
while length(num_vec) < 1{
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec)
while length(num_vec) => 1{
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec){
while length(num_vec) => 1{
n1 = 0
n2 = 1
#This takes input
num_vec <- 10
fibonacci_1 <- function(num_vec){
if(length(num_vec = 1)
print(n1)
fibonacci_1 <- function(num_vec){
if(length(num_vec = 1)print(n1)
n1 = 0
n2 = 1
#This takes input
num_vec <- 10
fibonacci_1 <- function(num_vec){
if(length(num_vec = 1)
fib <- print(n1)
return(fib)
}
print(fib)
n1 = 0
n2 = 1
#This takes input
num_vec <- 10
fibonacci_1 <- function(num_vec){
if(length(num_vec = 1)
fib <- n1
return(fib)
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
}
return(fib)
return(fib)
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
}
return(fib)
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
return(fib)
}
print(fib)
fibonacci <- (num_vec-1)
fib <- fibonacci
return(fib)
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
if (length(num_vec == 0))
fib <- 0
#for (i in num_vec)
# fibonacci <- (num_vec-1)
#fib <- fibonacci
#return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
if (length(num_vec == 0))
fib <- 0
#for (i in num_vec)
# fibonacci <- (num_vec-1)
#fib <- fibonacci
#return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(1, 2, 3, 4, 5)
fibonacci_1 <- function(num_vec){
#  if (length(num_vec == 3))
#   fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
#  if (length(num_vec == 0))
#   fib <- 0
#for (i in num_vec)
# fibonacci <- (num_vec-1)
#fib <- fibonacci
return(fib)
}
print(fib)
#  if (length(num_vec == 3))
#   fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
return(fib)
print(fib)
# Exercise 2:
num_vec <- c(1, 2, 3, 4, 5)
fibonacci_1 <- function(num_vec){
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
if (length(num_vec == 0))
fib <- 0
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(1, 2, 3, 4, 5)
fibonacci_1 <- function(num_vec){
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
if (length(num_vec == 0))
fib <- 0
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(1, 2, 3, 4, 5)
fibonacci_1 <- function(num_vec){
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
if (length(num_vec == 0))
fib <- 0
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(1, 3, 6)
fibonacci_1 <- function(num_vec){
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
if (length(num_vec == 0))
fib <- 0
return(fib)
}
print(fib)
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in (num_vec))
fibonacci <- (num_vec-1)
fib <- fibonacci
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in (num_vec))
fib <- (num_vec-1)
}
print(fib)
for (i in (num_vec))
fib <- (num_vec-1)
print(fib)
read.csv("C:\Users\diarmuid\Downloads\kaggle_survey_2022_responses.csv")
read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
set.seed(2024)
n <- 200
m <- 1000
mat <- matrix(rnorm(m * n, mean = 20, sd = 3), nrow = 200)
# For simplicity, let's assume that assignment to
# control and experimental groups is always the same.
grp <- rep(0:1, times = 100)
calculate_t_statistics_matrix <- function(mat, grp) {
#This makes sure the grp is a vector of the same length as rows in mat
if (length(grp) != nrow(mat)) {
stop("Length of grp must match the number of rows in the matrix")
}
#This initializes a vector to store t-statistics
tstats <- numeric(ncol(mat))
#This loops through each column
for (i in 1:ncol(mat)) {
column_data <- mat[, i]
n <- length(column_data)
mean_data <- mean(column_data)
sd_data <- sd(column_data)
t_statistic <- (mean_data - mean(grp)) / (sd_data / sqrt(n))
tstats[i] <- t_statistic
}
return(tstats)
}
#This returns a vector named tstats of calculated t-statistics for each experiment
tstats <- calculate_t_statistics_matrix(mat, grp)
print(tstats)
read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
head(kaggle2022, 1)
head(kaggle2022, 12)
data.frame(kaggle2022)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv", col.names = (questions))
data.frame(kaggle2022)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv", col.names = (questions))
data.frame(kaggle2022)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
data.frame(kaggle2022)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
df <- data.frame(kaggle2022)
df[c(12)]
df[c(31:46)]
df[c(31:45)]
df[c(30:45)]
count.fields(df[c(31)])
length(df[c(31)])
length(df[c(31:45)])
library(dplyr)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
df <- data.frame(kaggle2022)
count(df[c(31:45)])
summarise(df[c(31:45)])
df[c(31:45)]
summarise(df[c(31)])
object1 <- df[c(31:45)])
library(dplyr)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
df <- data.frame(kaggle2022)
object1 <- df[c(31:45)])
object1 <- df[c(31:45)]
sort(object1)
set.seed(2024)
dfs <- lapply(
1:10,
function(n) data.frame(x = letters[sample(1:26,20,TRUE)], y = sample(1:26,20,TRUE))
)
#This is used to create a data frame and then concatenate the rows
dffinal <- bind_rows(dfs[1:10])
duplicated(dffinal)
# Remove objects
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("stargazer","vioplot","arm","broom","ggplot2","fastDummies"),  pkgTest)
# Set working directory for current folder
setwd("C:\Users\diarmuid\Documents\StatsI_Fall2024\datasets")
getwd()
# Only include Ireland and relevant variables.
df <- read.csv("ESS10.csv")
# Set working directory for current folder
setwd("C:\Users\diarmuid\Documents\StatsI_Fall2024\datasets\")
getwd()
# Set working directory for current folder
setwd("C:\Users\diarmuid\Documents\StatsI_Fall2024\datasets")
getwd()
# Set working directory for current folder
setwd("C:/Users/diarmuid/Documents/StatsI_Fall2024/datasets")
getwd()
# Only include Ireland and relevant variables.
df <- read.csv("ESS10.csv")
df_s <- df[df$cntry=="IE", c("euftf","edlvdie","eduyrs","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
View(df_s)
# Reverse euftf, to measure euroscepticism more intuitively
df_s["euftf_re"] = 10 - df_s[ ,c("euftf")]
# Categorize education levels
df_s["edu_cat"] <- NA
df_s[(df_s$edlvdie==1) | (df_s$edlvdie==2) | (df_s$edlvdie==3) | (df_s$edlvdie==4), c("edu_cat")] <- 1 # Junior Cycle
df_s[(df_s$edlvdie==5) | (df_s$edlvdie==6) | (df_s$edlvdie==7) | (df_s$edlvdie==8) | (df_s$edlvdie==9), c("edu_cat")] <- 2 # Leaving Certificate
df_s[(df_s$edlvdie==10) | (df_s$edlvdie==11) | (df_s$edlvdie==12), c("edu_cat")] <- 3 # Advanced Certificate
df_s[(df_s$edlvdie==13) | (df_s$edlvdie==14) | (df_s$edlvdie==15), c("edu_cat")] <- 4 # Bachelor Degree
df_s[(df_s$edlvdie==16) | (df_s$edlvdie==17) | (df_s$edlvdie==18), c("edu_cat")] <- 5 # Postgraduate Degree
# Convert into factor variable
df_s$edu_cat <- factor(df_s$edu_cat,
levels = c(1,2,3,4,5),
labels = c("Junior Cycle",
"Leaving Certificate",
"Advanced Certificate",
"Bachelor Degree",
"Postgraduate Degree"))
levels(df_s$edu_cat)
typeof(df_s$edu_cat)
# Record missing values
df_s[(df_s == -67) | (df_s == -78) | (df_s == -89) | (df_s == 77) | (df_s == 88) | (df_s == 99) | (df_s == 999) | (df_s == 5555) | (df_s == 7777) | (df_s == 8888) | (df_s == 9999)] <- NA
# Save dataset
write.csv(df_s, "C:/Users/tpa064/Downloads/ess_euroscepticism.csv")
# Save dataset
write.csv(df_s, "C:/Users/diarmuid/Documents/StatsI_Fall2024/datasets/ess_euroscepticism.csv")
# Initial investigation ----------
df_s <- read.csv("C:/Users/diarmuid/Documents/StatsI_Fall2024/datasets/ess_euroscepticism.csv", row.names="X")
View(df_s)
is.factor(df_s$edu_cat)
# Convert into factor variable
df_s$edu_cat <- factor(df_s$edu_cat)
is.factor(df_s$edu_cat)
# Descriptive plots
par(mar = c(5, 5, 2, 2)) # Change margins in plot manually
vioplot(df_s$euftf_re ~ df_s$edu_cat)
plot(df_s$eduyrs,df_s$euftf_re)
plot(jitter(df_s$eduyrs,2),jitter(df_s$euftf_re,2))
# Simple model only considering socio-demographic variables
model_base <- lm(euftf_re~gndr + agea + brncntr, data=df_s)
summary(model_base)
# Simple linear regression
model_base <- lm(euftf_re~brncntr, data=df_s)
summary(model_base)
# Plot
plot(df_s$agea, df_s$euftf_re)
abline(h=model_base$coefficients[1],col="black") # Regression line brncntr=0, Born in country
abline(h=model_base$coefficients[1]+model_base$coefficients[2],col="blue") # Regression line brncntr=1, Not born in country
legend(70, 10, # Legend
legend=c("Born in country", "Not born in country"),
col=c("black","blue"),
pch=1)
# Multiple linear regression
model_base <- lm(euftf_re~brncntr + gndr + agea, data=df_s)
summary(model_base)
# Plot
plot(df_s$agea, df_s$euftf_re)
abline(model_base$coefficients[1], model_base$coefficients[4],col="black") # Regression line brncntr=0, Born in country
abline(model_base$coefficients[1]+model_base$coefficients[2], model_base$coefficients[4],col="blue") # Regression line brncntr=1, Not born in country
legend(70, 10, # Legend
legend=c("Born in country", "Not born in country"),
col=c("black","blue"),
pch=1)
# Continuous independent variable
model1 <- lm(euftf_re~eduyrs,data=df_s)
summary(model1)
df_s$JuniorCycle <- ifelse(df_s$edu_cat == "Junior Cycle", 1, 0)
df_s$LeavingCertificate <- ifelse(df_s$edu_cat == "Leaving Certificate", 1, 0)
df_s$AdvancedCertificate <- ifelse(df_s$edu_cat == "Advanced Certificate", 1, 0)
df_s$Bachelor <- ifelse(df_s$edu_cat == "Bachelor Degree", 1, 0)
df_s$Postgraduate <- ifelse(df_s$edu_cat == "Postgraduate Degree", 1, 0)
# Faster way to create dummy set
df_s <- dummy_cols(df_s, select_columns = "edu_cat")
# Fit model
model1 <- lm(euftf_re~LeavingCertificate+AdvancedCertificate+Bachelor+Postgraduate,data=df_s)
summary(model1)
# Change reference category to leaving certificate
model1 <- lm(euftf_re~JuniorCycle+AdvancedCertificate+Bachelor+Postgraduate,data=df_s)
summary(model1)
# Categorical independent variable, using factor variables
is.factor(df_s$edu_cat)
model1 <- lm(euftf_re~edu_cat,data=df_s)
summary(model1)
# Change reference category
# Which one should we select?
plot(df_s$edu_cat)
levels(df_s$edu_cat) # First level, "Advanced Certificate"
# Change reference category to leaving certificate
df_s$edu_cat <- relevel(df_s$edu_cat, ref = 4)
levels(df_s$edu_cat) # First level, "Leaving Certificate"
# Refit model
model1 <- lm(euftf_re~edu_cat,data=df_s)
summary(model1)
model2 <- lm(euftf_re~hinctnta,data=df_s)
summary(model2)
model3 <- lm(euftf_re~trstplt,data=df_s)
summary(model3)
model4 <- lm(euftf_re~imwbcnt,data=df_s)
summary(model4)
# Education--Continuous independent variable
model1 <- lm(euftf_re~eduyrs,data=df_s)
summary(model1)
nobs(model1) # Number of observations in model
# Add economic dimension
model_eco <- lm(euftf_re~eduyrs + hinctnta,data=df_s)
summary(model_eco)
nobs(model_eco) # Number of observations in model
# The easiest solution is to remove rows with missing values
df_na <- df_s[complete.cases(df_s), ]
# Let's start again, using only complete cases (df_na)
# Education--Continuous independent variable
model1 <- lm(euftf_re~eduyrs,data=df_na)
summary(model1)
# Add economic dimension
model_eco <- lm(euftf_re~eduyrs + hinctnta,data=df_na)
summary(model_eco)
# Add political dimension
model_pol <- lm(euftf_re~eduyrs + hinctnta + trstplt, data=df_na)
summary(model_pol)
# Add cultural dimension
model_cul <- lm(euftf_re~eduyrs + hinctnta + trstplt + imwbcnt, data=df_na)
summary(model_cul)
# Add socio-economic variables
model_final <- lm(euftf_re~eduyrs + hinctnta + trstplt + imwbcnt + gndr + agea + brncntr, data=df_na)
# Add socio-economic variables
model_final <- lm(euftf_re~eduyrs + hinctnta + trstplt + imwbcnt + gndr + agea + brncntr, data=df_na)
summary(model_final)
# Get Latex table
stargazer(model1,model_eco,model_pol,model_cul,model_final)
# How to visualize results?
coefplot(model_final) # 95% Confidence intervals (and 50% CIs)
coefplot(model1, add=TRUE, col.pts="gray")
# Does adding economic dimension improve fit?
anova(model1, model_eco, test='F')
summary(model_eco)
# Does adding political dimension improve fit?
anova(model1, model_pol, test='F')
summary(model_pol)
# What about political dimension alone?
model3 <- lm(euftf_re~eduyrs+trstplt,data=df_na) # Refit with df_na
anova(model1, model3, test='F')
# Does adding cultural dimension improve fit?
anova(model1, model_cul, test='F')
summary(model_cul)
# What about cultural dimension alone?
model4 <- lm(euftf_re~eduyrs+imwbcnt,data=df_na) # Refit with df_na
anova(model1, model4, test='F')
model1 <- lm(euftf_re~edu_cat+imwbcnt,data=df_na)
summary(model1)
levels(df_na$edu_cat)
# Plot
par(mar = c(5, 5, 2, 2)) # Change margins in plot manually
plot(df_na$imwbcnt, df_na$euftf_re)
abline(model1$coefficients[1], model1$coefficients[6],col="black") # edu_cat=0, "Leaving Certificate"
abline(model1$coefficients[1]+model1$coefficients[2], model1$coefficients[6],col="blue") # edu_cat=1, "Advanced Certificate"
abline(model1$coefficients[1]+model1$coefficients[3], model1$coefficients[6],col="green") # edu_cat=2, "Bachelor"
abline(model1$coefficients[1]+model1$coefficients[4], model1$coefficients[6],col="gray") # edu_cat=3, "Junior Cycle"
abline(model1$coefficients[1]+model1$coefficients[5], model1$coefficients[6],col="orange") # edu_cat=4, "Postgraduate"
legend(7, 10, # Legend
legend=c("Leaving Certificate","Advanced Certificate","Bachelor","Junior Cycle","Postgraduate"),
col=c("black","blue","green","gray","orange"),
pch=1)
# In ggplot
# Obtain predictions and residuals
preds <- augment(model1)
model1$fitted.values # predictions
model1$residuals # residuals
# Plot
ggplot(df_na, aes(imwbcnt, euftf_re, group = edu_cat)) +
geom_point(aes(colour = edu_cat)) + # Add points
geom_line(data = df_na, aes(y = model1$fitted.values, colour = edu_cat)) # Add regression lines
