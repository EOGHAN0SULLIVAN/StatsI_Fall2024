for (i in (num_vec))
fib <- (num_vec-1)
}
print(fib)
for (i in (num_vec))
fib <- (num_vec-1)
print(fib)
read.csv("C:\Users\diarmuid\Downloads\kaggle_survey_2022_responses.csv")
read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
set.seed(2024)
n <- 200
m <- 1000
mat <- matrix(rnorm(m * n, mean = 20, sd = 3), nrow = 200)
# For simplicity, let's assume that assignment to
# control and experimental groups is always the same.
grp <- rep(0:1, times = 100)
calculate_t_statistics_matrix <- function(mat, grp) {
#This makes sure the grp is a vector of the same length as rows in mat
if (length(grp) != nrow(mat)) {
stop("Length of grp must match the number of rows in the matrix")
}
#This initializes a vector to store t-statistics
tstats <- numeric(ncol(mat))
#This loops through each column
for (i in 1:ncol(mat)) {
column_data <- mat[, i]
n <- length(column_data)
mean_data <- mean(column_data)
sd_data <- sd(column_data)
t_statistic <- (mean_data - mean(grp)) / (sd_data / sqrt(n))
tstats[i] <- t_statistic
}
return(tstats)
}
#This returns a vector named tstats of calculated t-statistics for each experiment
tstats <- calculate_t_statistics_matrix(mat, grp)
print(tstats)
read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
head(kaggle2022, 1)
head(kaggle2022, 12)
data.frame(kaggle2022)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv", col.names = (questions))
data.frame(kaggle2022)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv", col.names = (questions))
data.frame(kaggle2022)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
data.frame(kaggle2022)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
df <- data.frame(kaggle2022)
df[c(12)]
df[c(31:46)]
df[c(31:45)]
df[c(30:45)]
count.fields(df[c(31)])
length(df[c(31)])
length(df[c(31:45)])
library(dplyr)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
df <- data.frame(kaggle2022)
count(df[c(31:45)])
summarise(df[c(31:45)])
df[c(31:45)]
summarise(df[c(31)])
object1 <- df[c(31:45)])
library(dplyr)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
df <- data.frame(kaggle2022)
object1 <- df[c(31:45)])
object1 <- df[c(31:45)]
sort(object1)
set.seed(2024)
dfs <- lapply(
1:10,
function(n) data.frame(x = letters[sample(1:26,20,TRUE)], y = sample(1:26,20,TRUE))
)
#This is used to create a data frame and then concatenate the rows
dffinal <- bind_rows(dfs[1:10])
duplicated(dffinal)
setwd("C:\Users\diarmuid\Documents\StatsI_Fall2024\my_answers\PS-03")
setwd("C:/Users/diarmuid/Documents/StatsI_Fall2024/my_answers/PS-03")
getwd()
incumbts <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/incumbents_subset.csv")
question1a_regression <- lm(voteshare ~ difflog, data = incumbts)
print(question1_regression)
print(question1a_regression)
## question1a_regression <- lm(voteshare ~ difflog, data = incumbts)
## print(question1a_regression)
summary(question1a_regression)
View(incumbts)
getwd()
incumbts <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/incumbents_subset.csv")
View(incumbts)
theve <- rep(3194)
theve <- rep()
df <- data.frame(incumbts)
View(df)
incumbts <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/incumbents_subset.csv")
col5 <- incumbts[, 5]
print(col5)
President <- incumbts[, 6]
Candidate <- incumbts[, 5]
Difference <- incumbts[, 7]
DifferntDifference <- President - Candidate
are_equal < all.equal(Difference, DifferntDifference)
are_equal <- all.equal(Difference, DifferntDifference)
print(are_equal == TRUE)
#Set working directory
setwd("C:/Users/diarmuid/Documents/StatsI_Fall2024/my_answers/PS-03")
getwd()
incumbts <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/incumbents_subset.csv")
## df <- data.frame(incumbts)
## View(df)
#Defining objects for the incumbent, challenger and difference between these in spending
Candidate <- incumbts[, 5]
President <- incumbts[, 6]
Difference <- incumbts[, 7]
#Calculating if the difflog variable is the same as the difference between incspend and chalspend
DifferntDifference <- President - Candidate
are_equal <- all.equal(Difference, DifferntDifference)
print(are_equal == TRUE)
def calculate_mean(0.1, 2.7, 3.5, 4, 5.98):
def calculate_mean(0.1, 2.7, 3.5, 4, 5.98):
round(pass)
def calculate_mean(0.1, 2.7, 3.5, 4, 5.98):
data_x <- c(0.1, 2.7, 3.5, 4, 5.98)
args(0.1, 2.7, 3.5, 4, 5.98)
args(0.1, 2.7, 3.5, 4, 5.98)
*args <- c(0.1, 2.7, 3.5, 4, 5.98)
args <- c(0.1, 2.7, 3.5, 4, 5.98)
args <- c(0.1, 2.7, 3.5, 4, 5.98)
def calculate_mean(args):
pass
pass <- c(0.1, 2.7, 3.5, 4, 5.98)
def calculate_mean(pass):
def calculate_mean:
def calculate_mean:
pass <- c(0.1, 2.7, 3.5, 4, 5.98)
def calculate_mean:
pass
pass <- c(0.1, 2.7, 3.5, 4, 5.98)
def calculate_mean:
def calculate_mean:
"""
Calculates mean
Takes any number of numeric arguments as an input.
Returns mean rounded to two decimal place.
"""
round(pass)
pass <- c(0.1, 2.7, 3.5, 4, 5.98)
def calculate_mean:
mean(i)
round(pass)
pass <- c(0.1, 2.7, 3.5, 4, 5.98)
def calculate_mean:
pass <- c(0.1, 2.7, 3.5, 4, 5.98)
def calculate_mean:
def calculatemean:
#Set working directory
setwd("C:/Users/diarmuid/Documents/StatsI_Fall2024/my_answers/PS-03")
getwd()
incumbts <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/incumbents_subset.csv")
#Defining objects for the incumbent, challenger and difference between these in spending
Candidate <- incumbts[, 5]
President <- incumbts[, 6]
Difference <- incumbts[, 7]
#Calculating if the difflog variable is the same as the difference between incspend and chalspend
DifferntDifference <- President - Candidate
are_equal <- all.equal(Difference, DifferntDifference)
print(are_equal == TRUE)
Voteshare <- incumbts[, 9]
#Using incumbent President's spending on campaign to see if more spending results in more votes
summary(President)
hist(incumbts$voteshare)
hist(incumbts$incspend)
plot(Voteshare ~ President, data = incumbts)
plot(incumbts$voteshare ~ incumbts$incspend, data = incumbts)
cor(incumbts$voteshare, incumbts$incspend)
#Plotting the
plot(incumbts$voteshare ~ incumbts$incspend, data = incumbts)
#Performing the regression analysis
incumbent.voteshare.lm < lm(incumbts$voteshare ~ incumbts$incspend, data = incumbts)
#Performing the regression analysis
incumbent.voteshare.lm <- lm(incumbts$voteshare ~ incumbts$incspend, data = incumbts)
summary(incumbent.voteshare.lm)
#Drawing the regression line to add to the scatter plot
incumbent.graph <- incumbent.voteshare.lm + geom_smooth(method="lm", col="black")
#Drawing the regression line to add to the scatter plot
question1 <- plot(incumbts$incspend, incumbts$voteshare,
xlab = "incspend"
ylab = "voteshare"
#Drawing the regression line to add to the scatter plot
question1 <- plot(incumbts$incspend, incumbts$voteshare,
xlab = "incspend"
ylab = "voteshare"
#Drawing the regression line to add to the scatter plot
question1 <- plot(incumbts$incspend, incumbts$voteshare,
xlab = "incspend"
ylab = "voteshare"
question1
#Drawing the regression line to add to the scatter plot
question1 <- plot(incumbts$incspend, incumbts$voteshare, data = incumbts
xlab = "incspend"
question1
#Drawing the regression line to add to the scatter plot
question1 <- plot(incumbts$incspend, incumbts$voteshare, data = incumbts
xlab = "incspend"
question1
#Drawing the regression line to add to the scatter plot
question1 <- plot(incumbts$incspend, incumbts$voteshare, data = incumbts,
xlab = "incspend"
ylab = "voteshare"
question1
install.packages("ggplot2")
library(ggplot2)
#Drawing the regression line to add to the scatter plot
ggplot(incumbent.voteshare.lm + geom_smooth(method="lm", se = FALSE, col="black"))
#Review of the scatter plot to see if the distribution of data points can be described with a straight line
plot(incumbts$voteshare ~ incumbts$incspend, data = incumbts)
#Drawing the regression line to add to the scatter plot
abline(lm_model,col="red")
#Fitting a linear model using an object named lm_function
lm_model <- lm(incumbts$voteshare ~ incumbts$incspend, data = incumbts)
#Drawing the regression line to add to the scatter plot
abline(lm_model,col="red")
#Using incumbent Presidents spending on campaign to see if more spending results in more votes
#Determining whether the dependent variable follows a normal distribution by using a histogram
hist(incumbts$difflog)
#Performing the regression analysis
incumbent.voteshare.lm <- lm(incumbts$voteshare ~ incumbts$difflog, data = incumbts)
summary(incumbent.voteshare.lm)
#Review of the scatter plot to see if the distribution of data points can be described with a straight line
plot(incumbts$voteshare ~ incumbts$difflog, data = incumbts)
#Fitting a linear model using an object named lm_function
lm_model <- lm(incumbts$voteshare ~ incumbts$difflog, data = incumbts)
#Drawing the regression line to add to the scatter plot
abline(lm_model,col="red")
#Saving the residuals of the regression model in an object
question1_residuals <- incumbent.voteshare.lm$residuals
#Set working directory
setwd("C:/Users/diarmuid/Documents/StatsI_Fall2024/my_answers/PS-03")
getwd()
incumbts <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/incumbents_subset.csv")
View(incumbts)
install.packages("ggplot2")
library(ggplot2)
#Defining objects for the incumbent, challenger and difference between these in spending
Candidate <- incumbts[, 5]
President <- incumbts[, 6]
Difference <- incumbts[, 7]
Voteshare <- incumbts[, 9]
#Calculating if the difflog variable is the same as the difference between incspend and chalspend
DifferntDifference <- President - Candidate
are_equal <- all.equal(Difference, DifferntDifference)
print(are_equal == TRUE)
#Using incumbent Presidents spending on campaign to see if more spending results in more votes
#Determining whether the dependent variable follows a normal distribution by using a histogram
hist(incumbts$difflog)
#Performing the regression analysis
incumbent.voteshare.lm <- lm(incumbts$voteshare ~ incumbts$difflog, data = incumbts)
summary(incumbent.voteshare.lm)
#Review of the scatter plot to see if the distribution of data points can be described with a straight line
plot(incumbts$voteshare ~ incumbts$difflog, data = incumbts)
#Fitting a linear model using an object named lm_function
lm_model <- lm(incumbts$voteshare ~ incumbts$difflog, data = incumbts)
#Drawing the regression line to add to the scatter plot
abline(lm_model,col="red")
#Saving the residuals of the regression model in a seperate object
question1_residuals <- incumbent.voteshare.lm$residuals
question1_residuals
#Writing the prediction equation
intercept <- round(question1_regression$coefficients[1],3)
#Writing the prediction equation
intercept <- round(incumbent.voteshare.lm$coefficients[1],3)
slope <- round(incumbent.voteshare.lm$coefficients[2],3)
cat(intercept, "+", slope, "* difflog")
#Question 2 - Does campaign spending differences affect presvote?
#Performing the regression analysis
incumbent.presvote.lm <- lm(incumbts$presvote ~ incumbts$difflog, data = incumbts)
summary(incumbent.presvote.lm)
#Review of the scatter plot to see if the distribution of data points can be described with a straight line
plot(incumbts$presvote ~ incumbts$difflog, data = incumbts)
#Fitting a linear model using an object named lm_model
lm_model <- lm(incumbts$presvote ~ incumbts$difflog, data = incumbts)
#Drawing the regression line to add to the scatter plot
abline(lm_model,col="red")
#Saving the residuals of the regression model in a separate object
question1_residuals <- incumbent.voteshare.lm$residuals
question1_residuals
#Saving the residuals of the regression model in a separate object
question1_residuals <- incumbent.presvote.lm$residuals
#Saving the residuals of the regression model in a separate object
question2_residuals <- incumbent.presvote.lm$residuals
question2_residuals
#Calculating the Beta0 - intercept and the BetaX - slope
intercept <- round(incumbent.presvote.lm$coefficients[1],3)
slope <- round(incumbent.presvote.lm$coefficients[2],3)
#Writing the prediction equation as y-hat = Intercept + Slope * Variable
cat(intercept, "+", slope, "* difflog")
#Question 2 - Does campaign spending differences affect presvote?
#Performing the regression analysis
incumbent.presvote.lm <- lm(incumbts$presvote ~ incumbts$difflog, data = incumbts)
summary(incumbent.presvote.lm)
#Question 1 - Does campaign spending differences affect voteshare?
#Determining whether the dependent variable follows a normal distribution by using a histogram
hist(incumbts$difflog)
#Performing the regression analysis
incumbent.voteshare.lm <- lm(incumbts$voteshare ~ incumbts$difflog, data = incumbts)
summary(incumbent.voteshare.lm)
#Review of the scatter plot to see if the distribution of data points can be described with a straight line
plot(incumbts$voteshare ~ incumbts$difflog, data = incumbts)
#Fitting a linear model using an object named lm_model
lm_model <- lm(incumbts$voteshare ~ incumbts$difflog, data = incumbts)
#Drawing the regression line to add to the scatter plot
abline(lm_model,col="red")
#Saving the residuals of the regression model in a separate object
question1_residuals <- incumbent.voteshare.lm$residuals
question1_residuals
#Calculating the Beta0 - intercept and the BetaX - slope
intercept <- round(incumbent.voteshare.lm$coefficients[1],3)
slope <- round(incumbent.voteshare.lm$coefficients[2],3)
#Writing the prediction equation as y-hat = Intercept + Slope * Variable
cat(intercept, "+", slope, "* difflog")
#Question 2 - Does campaign spending differences affect presvote?
#Performing the regression analysis
incumbent.presvote.lm <- lm(incumbts$presvote ~ incumbts$difflog, data = incumbts)
summary(incumbent.presvote.lm)
#Review of the scatter plot to see if the distribution of data points can be described with a straight line
plot(incumbts$presvote ~ incumbts$difflog, data = incumbts)
#Fitting a linear model using an object named lm_model
lm_model <- lm(incumbts$presvote ~ incumbts$difflog, data = incumbts)
#Drawing the regression line to add to the scatter plot
abline(lm_model,col="red")
#Saving the residuals of the regression model in a separate object
question2_residuals <- incumbent.presvote.lm$residuals
question2_residuals
#Calculating the Beta0 - intercept and the BetaX - slope
intercept <- round(incumbent.presvote.lm$coefficients[1],3)
slope <- round(incumbent.presvote.lm$coefficients[2],3)
#Writing the prediction equation as y-hat = Intercept + Slope * Variable
cat(intercept, "+", slope, "* difflog")
question2_residuals
#Calculating the Beta0 - intercept and the BetaX - slope
intercept <- round(incumbent.presvote.lm$coefficients[1],3)
slope <- round(incumbent.presvote.lm$coefficients[2],3)
#Writing the prediction equation as y-hat = Intercept + Slope * Variable
cat(intercept, "+", slope, "* difflog")
#Determining whether the dependent variable follows a normal distribution by using a histogram
hist(incumbts$presvote)
#Performing the regression analysis
incumbent.voteshare.lm <- lm(incumbts$voteshare ~ incumbts$presvote, data = incumbts)
summary(incumbent.voteshare.lm)
#Review of the scatter plot to see if the distribution of data points can be described with a straight line
plot(incumbts$voteshare ~ incumbts$presvote, data = incumbts)
#Fitting a linear model using an object named lm_model
lm_model <- lm(incumbts$voteshare ~ incumbts$presvote, data = incumbts)
#Drawing the regression line to add to the scatter plot
abline(lm_model,col="red")
#Calculating the Beta0 - intercept and the BetaX - slope
intercept <- round(incumbent.voteshare.lm$coefficients[1],3)
slope <- round(incumbent.voteshare.lm$coefficients[2],3)
#Writing the prediction equation as y-hat = Intercept + Slope * Variable
cat(intercept, "+", slope, "* presvote")
#Saving the residuals of the regression model in a separate object
question3_residuals <- incumbent.presvote.lm$residuals
question3_residuals
#Calculating the Beta0 - intercept and the BetaX - slope
intercept <- round(incumbent.voteshare.lm$coefficients[1],3)
slope <- round(incumbent.voteshare.lm$coefficients[2],3)
#Writing the prediction equation as y-hat = Intercept + Slope * Variable
cat(intercept, "+", slope, "* presvote")
#Fitting a linear model using an object named lm_model
lm_model <- lm(incumbts$voteshare ~ incumbts$presvote, data = incumbts)
#Drawing the regression line to add to the scatter plot
abline(lm_model,col="red")
#Calculating the Beta0 - intercept and the BetaX - slope
intercept <- round(incumbent.voteshare.lm$coefficients[1],3)
slope <- round(incumbent.voteshare.lm$coefficients[2],3)
#Writing the prediction equation as y-hat = Intercept + Slope * Variable
cat(intercept, "+", slope, "* presvote")
#Determining spending - question 5
#Defining objects for the incumbent, challenger and difference between these in spending
Candidate <- incumbts[, 5]
President <- incumbts[, 6]
Difference <- incumbts[, 7]
Voteshare <- incumbts[, 9]
#Question 5 - Is the incumbent's voteshare affected by both the president's popularity and spending differences?
#Performing the regression analysis
#Calculating if the difflog variable is the same as the difference between incspend and chalspend
DifferntDifference <- President - Candidate
are_equal <- all.equal(Difference, DifferntDifference)
print(are_equal == TRUE)
View(incumbts)
Presvote <- incumbts[, 8]
#Performing the regression analysis
question5 <- lm(Voteshare ~ Difference + Presvote)
print(question5)
summary(question5)
#Writing the prediction equation
intercept <- round(question5$coefficients[1],3)
slope <- round(question5$coefficients[2],3)
cat(intercept, "+", slope, "* presvote")
#Writing the prediction equation
intercept <- round(question5$coefficients[1],3)
slope <- round(question5$coefficients[2],3)
slope2 <- round(question5$coefficients[3],3)
cat(intercept, "+", slope2, "* difflog", "+", slope, "* presvote")
#Printing and summarizing the regression analysis
print(question4regression)
#Question 4 - Running a regression based on previously calculated residuals
question4regression <- lm(question1_residuals ~ question2_residuals, data = incumbts)
#Printing and summarizing the regression analysis
print(question4regression)
summary(question4regression)
#Making a scatterplot with regression line graph and reviewing it
plot(question1_residuals ~ question2_residuals, data = incumbts)
lm_model <- lm(question1_residuals ~ question2_residuals, data = incumbts)
#Making a scatterplot with regression line graph and reviewing it
plot(question1_residuals ~ question2_residuals, data = incumbts)
lm_model <- lm(question1_residuals ~ question2_residuals, data = incumbts)
abline(lm_model,col="red")
#Set working directory
setwd("C:/Users/diarmuid/Documents/StatsI_Fall2024/my_answers/PS-03")
getwd()
incumbts <- read.csv("https://raw.githubusercontent.com/ASDS-TCD/StatsI_Fall2024/main/datasets/incumbents_subset.csv")
View(incumbts)
#Determining spending - question 5
#Defining objects for the incumbent, challenger and difference between these in spending
Candidate <- incumbts[, 5]
President <- incumbts[, 6]
Difference <- incumbts[, 7]
Presvote <- incumbts[, 8]
Voteshare <- incumbts[, 9]
#Question 1 - Does campaign spending differences affect voteshare?
#Determining whether the dependent variable follows a normal distribution by using a histogram
hist(incumbts$difflog)
#Performing the regression analysis
incumbent.voteshare.lm <- lm(incumbts$voteshare ~ incumbts$difflog, data = incumbts)
summary(incumbent.voteshare.lm)
#Review of the scatter plot to see if the distribution of data points can be described with a straight line
plot(incumbts$voteshare ~ incumbts$difflog, data = incumbts)
#Fitting a linear model using an object named lm_model
lm_model <- lm(incumbts$voteshare ~ incumbts$difflog, data = incumbts)
#Drawing the regression line to add to the scatter plot
abline(lm_model,col="red")
#Saving the residuals of the regression model in a separate object
question1_residuals <- incumbent.voteshare.lm$residuals
question1_residuals
#Calculating the Beta0 - intercept and the BetaX - slope
intercept <- round(incumbent.voteshare.lm$coefficients[1],3)
slope <- round(incumbent.voteshare.lm$coefficients[2],3)
#Writing the prediction equation as y-hat = Intercept + Slope * Variable
cat(intercept, "+", slope, "* difflog")
#Question 2 - Do campaign spending differences affect presvote?
#Performing the regression analysis
incumbent.presvote.lm <- lm(incumbts$presvote ~ incumbts$difflog, data = incumbts)
summary(incumbent.presvote.lm)
#Review of the scatter plot to see if the distribution of data points can be described with a straight line
plot(incumbts$presvote ~ incumbts$difflog, data = incumbts)
#Fitting a linear model using an object named lm_model
lm_model <- lm(incumbts$presvote ~ incumbts$difflog, data = incumbts)
#Drawing the regression line to add to the scatter plot
abline(lm_model,col="red")
#Saving the residuals of the regression model in a separate object
question2_residuals <- incumbent.presvote.lm$residuals
question2_residuals
#Calculating the Beta0 - intercept and the BetaX - slope
intercept <- round(incumbent.presvote.lm$coefficients[1],3)
slope <- round(incumbent.presvote.lm$coefficients[2],3)
#Writing the prediction equation as y-hat = Intercept + Slope * Variable
cat(intercept, "+", slope, "* difflog")
#Question 3 - How does the incumbent President's party vote share affect his/her electoral success?
#Determining whether the dependent variable follows a normal distribution by using a histogram
hist(incumbts$presvote)
#Performing the regression analysis
incumbent.voteshare.lm <- lm(incumbts$voteshare ~ incumbts$presvote, data = incumbts)
summary(incumbent.voteshare.lm)
#Review of the scatter plot to see if the distribution of data points can be described with a straight line
plot(incumbts$voteshare ~ incumbts$presvote, data = incumbts)
#Fitting a linear model using an object named lm_model
lm_model <- lm(incumbts$voteshare ~ incumbts$presvote, data = incumbts)
#Drawing the regression line to add to the scatter plot
abline(lm_model,col="red")
#Calculating the Beta0 - intercept and the BetaX - slope
intercept <- round(incumbent.voteshare.lm$coefficients[1],3)
slope <- round(incumbent.voteshare.lm$coefficients[2],3)
#Writing the prediction equation as y-hat = Intercept + Slope * Variable
cat(intercept, "+", slope, "* presvote")
#Question 4 - Running a regression based on previously calculated residuals
question4regression <- lm(question1_residuals ~ question2_residuals, data = incumbts)
#Printing and summarizing the regression analysis
print(question4regression)
summary(question4regression)
#Making a scatterplot with regression line graph and reviewing it
plot(question1_residuals ~ question2_residuals, data = incumbts)
lm_model <- lm(question1_residuals ~ question2_residuals, data = incumbts)
abline(lm_model,col="red")
#Question 5 - Is the incumbent's voteshare affected by both the president's popularity and spending differences?
#Calculating if the difflog variable is the same as the difference between incspend and chalspend
DifferntDifference <- President - Candidate
are_equal <- all.equal(Difference, DifferntDifference)
print(are_equal == TRUE)
#Performing the regression analysis
question5 <- lm(Voteshare ~ Difference + Presvote)
print(question5)
summary(question5)
#Writing the prediction equation
intercept <- round(question5$coefficients[1],3)
slope <- round(question5$coefficients[2],3)
slope2 <- round(question5$coefficients[3],3)
cat(intercept, "+", slope2, "* difflog", "+", slope, "* presvote")
