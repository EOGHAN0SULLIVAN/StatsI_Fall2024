print(fib)
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
#    while(num_vec)
fib <- fibonacci
return(fibonacci)
}
print(fib)
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
#    while(num_vec)
fib <- fibonacci
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
#    while(num_vec)
fib <- fibonacci
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
#    while(num_vec)
fib <- fibonacci
return(fibonacci)
}
print(fib)
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
#    while(num_vec)
fib <- fibonacci
return(fibonacci_1)
}
print(fib)
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
#    while(num_vec)
return(fibonacci)
}
print(fibonacci)
# Exercise 2:
num_vec <- c(1, 3, 6)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonaaci
}
print(fib)
# Exercise 2:
num_vec <- c(1, 3, 6)
fibonaaci_1 <- function(num_vec){
for (i in num_vec)
fibonaaci <- (num_vec-1)
fib <- fibonaaci
}
return(fib)
fib <- fibonaaci_1(num_vec)
print(fib)
# Exercise 2:
num_vec <- c(1, 3, 6)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
}
return(fib)
fib <- fibonacci_1(num_vec)
print(fib)
# Exercise 2:
num_vec <- c(1, 3, 6)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
}
return(fib)
print(fib)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
}
return(fib)
# Exercise 2:
num_vec <- c(1, 3, 6)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
}
return(fib)
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
}
return(fib)
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
}
return(fib)
print(fib)
fibonacci <- (num_vec-1)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for i in num_vec
return(fib)
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for i in num_vec
return(fib)
print(fib)
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec){
while length(num_vec) == 1{
return(fib)
print(fib)
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec)
while length(num_vec) == 1{
print(fib)
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec)
while length(num_vec) < 1{
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec)
while length(num_vec) => 1{
# Exercise 2:
num_vec <- 10
fibonacci_1 <- function(num_vec){
while length(num_vec) => 1{
n1 = 0
n2 = 1
#This takes input
num_vec <- 10
fibonacci_1 <- function(num_vec){
if(length(num_vec = 1)
print(n1)
fibonacci_1 <- function(num_vec){
if(length(num_vec = 1)print(n1)
n1 = 0
n2 = 1
#This takes input
num_vec <- 10
fibonacci_1 <- function(num_vec){
if(length(num_vec = 1)
fib <- print(n1)
return(fib)
}
print(fib)
n1 = 0
n2 = 1
#This takes input
num_vec <- 10
fibonacci_1 <- function(num_vec){
if(length(num_vec = 1)
fib <- n1
return(fib)
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
}
return(fib)
return(fib)
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
}
return(fib)
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
return(fib)
}
print(fib)
fibonacci <- (num_vec-1)
fib <- fibonacci
return(fib)
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
if (length(num_vec == 0))
fib <- 0
#for (i in num_vec)
# fibonacci <- (num_vec-1)
#fib <- fibonacci
#return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
if (length(num_vec == 0))
fib <- 0
#for (i in num_vec)
# fibonacci <- (num_vec-1)
#fib <- fibonacci
#return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(1, 2, 3, 4, 5)
fibonacci_1 <- function(num_vec){
#  if (length(num_vec == 3))
#   fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
#  if (length(num_vec == 0))
#   fib <- 0
#for (i in num_vec)
# fibonacci <- (num_vec-1)
#fib <- fibonacci
return(fib)
}
print(fib)
#  if (length(num_vec == 3))
#   fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
return(fib)
print(fib)
# Exercise 2:
num_vec <- c(1, 2, 3, 4, 5)
fibonacci_1 <- function(num_vec){
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
if (length(num_vec == 0))
fib <- 0
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(1, 2, 3, 4, 5)
fibonacci_1 <- function(num_vec){
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
if (length(num_vec == 0))
fib <- 0
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(1, 2, 3, 4, 5)
fibonacci_1 <- function(num_vec){
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
if (length(num_vec == 0))
fib <- 0
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(1, 3, 6)
fibonacci_1 <- function(num_vec){
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
if (length(num_vec == 5))
fib <- c(0, 1, 0+1, 1+1, 2+1)
if (length(num_vec == 0))
fib <- 0
return(fib)
}
print(fib)
if (length(num_vec == 3))
fib <- c(0, 1, 0+1)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in num_vec)
fibonacci <- (num_vec-1)
fib <- fibonacci
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in (num_vec))
fibonacci <- (num_vec-1)
fib <- fibonacci
return(fib)
}
print(fib)
# Exercise 2:
num_vec <- c(3, 9, 12)
fibonacci_1 <- function(num_vec){
for (i in (num_vec))
fib <- (num_vec-1)
}
print(fib)
for (i in (num_vec))
fib <- (num_vec-1)
print(fib)
read.csv("C:\Users\diarmuid\Downloads\kaggle_survey_2022_responses.csv")
read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
set.seed(2024)
n <- 200
m <- 1000
mat <- matrix(rnorm(m * n, mean = 20, sd = 3), nrow = 200)
# For simplicity, let's assume that assignment to
# control and experimental groups is always the same.
grp <- rep(0:1, times = 100)
calculate_t_statistics_matrix <- function(mat, grp) {
#This makes sure the grp is a vector of the same length as rows in mat
if (length(grp) != nrow(mat)) {
stop("Length of grp must match the number of rows in the matrix")
}
#This initializes a vector to store t-statistics
tstats <- numeric(ncol(mat))
#This loops through each column
for (i in 1:ncol(mat)) {
column_data <- mat[, i]
n <- length(column_data)
mean_data <- mean(column_data)
sd_data <- sd(column_data)
t_statistic <- (mean_data - mean(grp)) / (sd_data / sqrt(n))
tstats[i] <- t_statistic
}
return(tstats)
}
#This returns a vector named tstats of calculated t-statistics for each experiment
tstats <- calculate_t_statistics_matrix(mat, grp)
print(tstats)
read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
head(kaggle2022, 1)
head(kaggle2022, 12)
data.frame(kaggle2022)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv", col.names = (questions))
data.frame(kaggle2022)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv", col.names = (questions))
data.frame(kaggle2022)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
data.frame(kaggle2022)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
df <- data.frame(kaggle2022)
df[c(12)]
df[c(31:46)]
df[c(31:45)]
df[c(30:45)]
count.fields(df[c(31)])
length(df[c(31)])
length(df[c(31:45)])
library(dplyr)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
df <- data.frame(kaggle2022)
count(df[c(31:45)])
summarise(df[c(31:45)])
df[c(31:45)]
summarise(df[c(31)])
object1 <- df[c(31:45)])
library(dplyr)
kaggle2022 <- read.csv("C:/Users/diarmuid/Downloads/kaggle_survey_2022_responses.csv")
df <- data.frame(kaggle2022)
object1 <- df[c(31:45)])
object1 <- df[c(31:45)]
sort(object1)
set.seed(2024)
dfs <- lapply(
1:10,
function(n) data.frame(x = letters[sample(1:26,20,TRUE)], y = sample(1:26,20,TRUE))
)
#This is used to create a data frame and then concatenate the rows
dffinal <- bind_rows(dfs[1:10])
duplicated(dffinal)
install.packages(car)
library(car)
help()
install.packages("installr")
library(installr)
updateR()
install.packages(car)
library(car)
install.packages(car)
library(car)
data(Prestige)
help(Prestige)
setwd("C:/Users/diarmuid/Documents/StatsI_Fall2024/my_answers/PS-04")
getwd()
#Creating a data frame from the data
df <- data.frame(Prestige)
#Creating a binary 0/1 variable called professional from existing strings, ignoring missing data fields
df$professional <- ifelse(is.na(df$type), NA, ifelse(df$type == "prof", 1, 0))
#Printing the data frame with the new variable called professional
print(df)
#Run the linear model using the lm function on the data frame previously updated above
model <- lm(prestige ~ professional + df$income, data = df)
summary(model)
#Calculating the change in the average prestige associated with a $1000 increase in income
income_coefficient <- 1.371e-03
change_in_income <- 1000
change_in_prestige <- income_coefficient * change_in_income
#Printing the result
print(change_in_prestige)
#Calculating the change in the average prestige associated with an income of $6000
income_coefficient <- 22.76
change_in_income <- 6000
change_in_prestige <- income_coefficient * change_in_income
#Printing the result
print(change_in_prestige)
#Calculating the change in the average prestige associated with an income of $6000
prof_coefficient <- 22.76
income_value <- 6000
change_in_prestige_professional <- prof_coefficient * income_value
#Printing the result
print(change_in_prestige_professional)
## Question 2
#Given coefficient and standard error and plugging into R
coef_assigned <- 0.042
se_assigned <- 0.016
#Calculation of T-value
t_value <- coef_assigned / se_assigned
print(t_value)
#Calculation of p-value using the given degrees of freedom
degrees_f <- 30 - 2
p_value <- 2 * pt(-abs(t-value), degrees_f)
#Calculation of p-value using the given degrees of freedom
degrees_f <- 30 - 2
p_value <- 2 * pt(-abs(t_value), degrees_f)
print(p_value)
#Coefficient and Standard Error for Precinct Adjacent to Lawn Signs
coef_adjacent <- 0.042
se_adjacent <- 0.013
#Calculating the t-value
t_value_adjacent <- coef_adjacent / se_adjacent
print(t_value_adjacent)
#Degrees of freedom
deg_free <- 30 - 2
# Calculate the p-value (two-tailed)
p_value_adjacent <- 2 * pt(-abs(t_value_adjacent), deg_free)
print(p_value_adjacent)
